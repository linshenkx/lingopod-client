name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'  # 对应 Dart SDK 3.5.4
          channel: 'stable'
          cache: true
      
      - name: Install Dependencies
        run: flutter pub get

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # 使用 Eclipse Temurin JDK
          java-version: '17'       # 指定 Java 17 版本

      # 安装 Windows 构建依赖
      - name: Install Windows build dependencies
        run: flutter config --enable-windows-desktop

      # 首先构建 Windows
      - name: Build Windows
        run: |
          Write-Host "开始 Windows 构建..."
          flutter config --enable-windows-desktop
          flutter create --platforms=windows .
          flutter build windows --release
          
          # 验证 Windows 构建
          Write-Host "检查 Windows 构建输出..."
          $windowsPaths = @(
              "build/windows/x64/x64/Release",
              "build/windows/runner/Release",
              "build/windows/x64/runner/Release"
          )
          
          $buildFound = $false
          foreach ($path in $windowsPaths) {
              if (Test-Path $path) {
                  Write-Host "✅ Windows 构建成功: $path"
                  Write-Host "文件列表:"
                  Get-ChildItem -Path $path -Recurse
                  $buildFound = $true
                  break
              }
          }
          
          if (-not $buildFound) {
              Write-Host "❌ Windows 构建失败，未找到构建目录"
              Write-Host "当前 build/windows 目录结构："
              Get-ChildItem -Path "build/windows" -Recurse
              exit 1
          }
      
      # 然后构建 Web（因为通常比较快）
      - name: Build Web
        run: |
          Write-Host "开始 Web 构建..."
          flutter build web --release
          
          # 验证 Web 构建
          $webPath = "build/web"
          if (Test-Path $webPath) {
              Write-Host "✅ Web 构建成功"
              Write-Host "Web 构建文件列表:"
              Get-ChildItem -Path $webPath -Recurse
          } else {
              Write-Host "❌ Web 构建失败，目录不存在"
              exit 1
          }
      
      # 最后构建 APK（因为最耗时）
      - name: Build Android APK
        run: |
          Write-Host "开始 APK 构建..."
          flutter build apk --release
          
          # 验证 APK 构建
          $apkPath = "build/app/outputs/flutter-apk/app-release.apk"
          if (Test-Path $apkPath) {
              Write-Host "✅ APK 构建成功: $apkPath"
              Write-Host "APK 大小: $((Get-Item $apkPath).length / 1MB) MB"
          } else {
              Write-Host "❌ APK 构建失败，文件不存在"
              exit 1
          }
      
      # 打包发布文件
      - name: Package Release Files
        run: |
          Write-Host "开始打包发布文件..."
          New-Item -ItemType Directory -Force -Path release
          
          # 打包 Windows
          Write-Host "正在处理 Windows 文件..."
          $windowsBuildPath = "build/windows/x64/runner/Release"
          
          if (Test-Path $windowsBuildPath) {
              Write-Host "找到 Windows 构建目录: $windowsBuildPath"
              Write-Host "目录内容:"
              Get-ChildItem -Path $windowsBuildPath -Recurse
              
              $tempDir = "temp_windows"
              New-Item -ItemType Directory -Force -Path $tempDir
              
              # 复制所有文件
              Copy-Item "$windowsBuildPath/*" -Destination $tempDir -Recurse
              
              Write-Host "临时目录内容:"
              Get-ChildItem -Path $tempDir -Recurse
              
              # 创建压缩包
              Compress-Archive -Path "$tempDir/*" -DestinationPath "release/lingopod-windows.zip" -Force
              
              # 验证压缩包
              if (Test-Path "release/lingopod-windows.zip") {
                  Write-Host "✅ Windows 压缩包创建成功"
                  Write-Host "大小: $((Get-Item 'release/lingopod-windows.zip').length / 1MB) MB"
              } else {
                  Write-Host "❌ Windows 压缩包创建失败"
                  exit 1
              }
              
              # 清理临时目录
              Remove-Item -Path $tempDir -Recurse -Force
          } else {
              Write-Host "❌ 未找到 Windows 构建目录: $windowsBuildPath"
              Write-Host "可用的构建目录:"
              Get-ChildItem -Path "build/windows" -Recurse
              exit 1
          }
          
          # 打包 Web
          Write-Host "正在处理 Web 文件..."
          Compress-Archive -Path "build/web/*" -DestinationPath "release/lingopod-web.zip" -Force
          
          # 验证最终结果
          Write-Host "发布文件打包完成，检查结果："
          Get-ChildItem -Path "release" | ForEach-Object {
              Write-Host "- $($_.Name): $($_.Length / 1MB) MB"
          }

      # 创建 GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/lingopod-android.apk
            release/lingopod-windows.zip
            release/lingopod-web.zip
          name: Release v1.0.0
          draft: false
          prerelease: false
          body: |
            ## 下载
            - [Windows 客户端](https://github.com/${{ github.repository }}/releases/download/v1.0.0/lingopod-windows.zip)
            - [Android APK](https://github.com/${{ github.repository }}/releases/download/v1.0.0/lingopod-android.apk)
            - [Web 版本](https://github.com/${{ github.repository }}/releases/download/v1.0.0/lingopod-web.zip)
            
            ## 部署说明
            ### Web 版本部署
            1. 解压 lingopod-web.zip 到 Web 服务器目录
            2. 配置服务器地址
            
            ### 桌面端
            1. 解压 Windows 压缩包
            2. 运行可执行文件
            3. 在设置中配置服务器地址
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}